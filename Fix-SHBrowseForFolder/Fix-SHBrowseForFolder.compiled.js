(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

console.log("Starting");

const Win32 = require('../common/win32');

const Struct = require('../common/struct');

const GUID = require('../common/guid');

const COM = require('../common/com'); // Define API's from windows headers.


var CLSID_FileOpenDialog = GUID.alloc("DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7");
var FOS_PICKFOLDERS = 0x20;
var IFileDialog = new COM.Interface(COM.IUnknown, {
  Show: [0, ['uint']],
  SetOptions: [6, ['uint']],
  GetResult: [17, ['pointer']]
}, "42f85136-db7e-439c-85f1-e4075d135fc8");
var IShellItem = new COM.Interface(COM.IUnknown, {}, "43826d1e-e718-42ee-bc55-a1e261c37bfe");
var SHBrowseForFolderPtr = Module.findExportByName('shell32.dll', 'SHBrowseForFolderW');
var SHBrowseForFolder = new NativeFunction(SHBrowseForFolderPtr, 'pointer', ['pointer']);
var SHGetIDListFromObject = new NativeFunction(Module.findExportByName('shell32.dll', 'SHGetIDListFromObject'), 'uint', ['pointer', 'pointer']);
var BIF_EDITBOX = 0x00000010;
var BIF_NEWDIALOGSTYLE = 0x00000040;
var BIF_RETURNONLYFSDIRS = 0x00000001; // Intercept and replace SHBrowseForFolderW

Interceptor.replace(SHBrowseForFolderPtr, new NativeCallback(function (browseinfoPtr) {
  console.log("SHBrowseForFolderW Entry");
  var browseinfo = new Struct({
    // BROWSEINFO
    'hwndOwner': 'int',
    'pidlRoot': 'pointer',
    'pszDisplayName': 'pointer',
    'lpszTitle': 'pointer',
    'ulFlags': 'uint',
    'lpfn': 'pointer',
    'lParam': 'long',
    'iImage': 'int'
  }, browseinfoPtr);
  console.log("SHBrowseForFolderW ulFlags: 0x" + browseinfo.ulFlags.toString(16)); // Per the docs, COM should already be initialized but this wasn't the case when testing against a real app.

  COM.Initialize(COM.ApartmentType.STA); // Create and show the replacement dialog

  var modalWindow = COM.CreateInstance(CLSID_FileOpenDialog, COM.ClassContext.InProc, IFileDialog);
  modalWindow.SetOptions(FOS_PICKFOLDERS);
  modalWindow.Show(browseinfo.hwndOwner);
  var shellItem = new COM.Pointer(IShellItem);
  COM.ThrowIfFailed(modalWindow.GetResult(shellItem.GetAddressOf())); // Convert IShellItem result to an idlist to return to SHBrowseForFolderW.

  var pidl = Memory.alloc(Process.pointerSize);
  COM.ThrowIfFailed(SHGetIDListFromObject(shellItem.Get(), pidl));
  console.log("SHBrowseForFolderW Exit pidl=" + pidl);
  return Memory.readPointer(pidl);
}, 'pointer', ['pointer'], Win32.Abi));
console.log("Ready");

},{"../common/com":2,"../common/guid":3,"../common/struct":4,"../common/win32":5}],2:[function(require,module,exports){
const Struct = require('./struct');

const GUID = require('./guid');

const Win32 = require('./win32');

var HRESULTMap = [['E_ABORT', 0x80004004], ['E_ACCESSDENIED', 0x80070005], ['E_FAIL', 0x80004005], ['E_HANDLE', 0x80070006], ['E_INVALIDARG', 0x80070057], ['E_NOINTERFACE', 0x80004002], ['E_NOTIMPL', 0x80004001], ['E_OUTOFMEMORY', 0x8007000E], ['E_POINTER', 0x80004003], ['E_UNEXPECTED', 0x8000FFFF]]; // COM global constants

var S_OK = 0;
var S_FALSE = 1;
var E_NOINTERFACE = 0x80004002; // COM Flow control

function Succeeded(hr) {
  var ret = parseInt(hr, 10);
  return ret == S_OK || ret == S_FALSE;
}

function Failed(hr) {
  return !Succeeded(hr);
}

function ThrowIfFailed(hr) {
  if (Failed(hr)) {
    var friendlyStr = "";

    for (var i = 0; i < HRESULTMap.length; ++i) {
      if (hr == HRESULTMap[i][1]) {
        friendlyStr = " " + HRESULTMap[i][0];
        break;
      }
    }

    throw new Error('COMException 0x' + hr.toString(16) + friendlyStr);
  }

  return hr;
}

var IUnknown = {
  IID: GUID.alloc("00000000-0000-0000-C000-000000000046"),
  QueryInterface: [0, ['pointer', 'pointer']],
  AddRef: [1, []],
  Release: [2, []]
};
var IInspectable = {
  IID: GUID.alloc("AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90"),
  // IUnknown
  QueryInterface: IUnknown.QueryInterface,
  AddRef: IUnknown.AddRef,
  Release: IUnknown.Release,
  // IInspectable
  GetIids: [3, ['pointer', 'pointer']],
  GetRuntimeClassName: [4, ['pointer']],
  GetTrustLevel: [5, ['pointer']]
};
var IAgileObject = new ComInterface(IUnknown, {// Marker interface, it has no methods.
}, "94EA2B94-E9CC-49E0-C0FF-EE64CA8F5B90");
var Ole32 = {
  CoInitializeEx: new NativeFunction(Module.findExportByName("Ole32.dll", "CoInitializeEx"), 'uint', ['pointer', 'uint'], Win32.Abi),
  CoCreateInstance: new NativeFunction(Module.findExportByName("Ole32.dll", "CoCreateInstance"), 'uint', ['pointer', 'pointer', 'uint', 'pointer', 'pointer'], Win32.Abi)
};

function ComInterface(baseInterface, methods, iid_str) {
  for (var method in methods) {
    this[method] = methods[method];
  }

  this.IID = GUID.alloc(iid_str);

  if (baseInterface.IID == IInspectable.IID) {
    this.IInspectable = true;
  }
}

function iunknown_ptr(address, idl) {
  function vtable_wrapper(address) {
    var getMethodAddress = function (ordinal) {
      var addr = Memory.readPointer(address); // vtbl

      return Memory.readPointer(addr.add(Process.pointerSize * ordinal)); // pointer to func
    };

    this.GetMethodAddress = getMethodAddress;

    this.Invoke = function (ordinal, paramTypes, params, tagName) {
      if (address == 0x0) {
        throw Error("Can't invoke method on null pointer");
      } //console.log("com_ptr(" + address + ")->" + tagName + " (" + params + ")");
      // Add 'this' as first argument


      var localTypes = paramTypes.slice();
      localTypes.unshift('pointer');
      var localParams = params.slice();
      localParams.unshift(address);
      var fn = new NativeFunction(getMethodAddress(ordinal), 'uint', localTypes, Win32.Abi);
      return fn.apply(fn, localParams);
    };
  }

  var vtable = new vtable_wrapper(address);

  var calculateOrdinal = function (ordinal) {
    var countMethods = function (idl) {
      var count = -1; // IID will be the only non-method property.

      for (var method in idl) {
        ++count;
      }

      return count;
    };

    return ordinal + (idl.IInspectable ? countMethods(IInspectable) : countMethods(IUnknown));
  };

  this.InvokeMethod = function (ordinal, paramTypes, params, tagName) {
    return vtable.Invoke(calculateOrdinal(ordinal), paramTypes, params, tagName);
  };

  this.GetMethodAddress = function (ordinal) {
    return vtable.GetMethodAddress(calculateOrdinal(ordinal));
  }; // IUnknown


  this.QueryInterface = function (iid, ppv) {
    return vtable.Invoke(IUnknown.QueryInterface[0], IUnknown.QueryInterface[1], [iid, ppv], "QueryInterface");
  };

  this.AddRef = function () {
    return vtable.Invoke(IUnknown.AddRef[0], IUnknown.AddRef[1], [], "AddRef");
  };

  this.Release = function () {
    return vtable.Invoke(IUnknown.Release[0], IUnknown.Release[1], [], "Release");
  }; // IInspectable


  this.GetIids = function () {
    var size_ptr = new Struct({
      'value': 'pointer'
    });
    var iids_ptr = new Struct({
      'value': 'pointer'
    });
    ThrowIfFailed(vtable.Invoke(IInspectable.GetIids[0], IInspectable.GetIids[1], [size_ptr.Get(), iids_ptr.Get()], "GetIids"));
    var size = Memory.readUInt(size_ptr.value);
    var ret = [];

    for (var i = 0; i < size; ++i) {
      ret.push(GUID.read(iids_ptr.value.add(i * Process.pointerSize)));
    }

    return ret;
  };

  this.GetRuntimeClassName = function () {
    var class_name_ptr = new Struct({
      'value': 'pointer'
    });

    if (Succeeded(vtable.Invoke(IInspectable.GetRuntimeClassName[0], IInspectable.GetRuntimeClassName[1], [class_name_ptr.Get()], "GetRuntimeClassName"))) {
      return WinRT.HSTRING.read(class_name_ptr.value);
    } else {
      return "[GetRuntimeClassName Failed]";
    }
  };

  this.GetTrustLevel = function () {
    var trust_ptr = new Struct({
      'value': 'pointer'
    });
    ThrowIfFailed(vtable.Invoke(IInspectable.GetTrustLevel[0], IInspectable.GetTrustLevel[1], [trust_ptr.Get()], "GetTrustLevel"));
    var trust_level = Memory.readUInt(trust_ptr.value);
    return trust_level == 0 ? "BaseTrust" : trust_level == 1 ? "PartialTrust" : "FullTrust";
  };
}

function com_ptr(idl) {
  var _ptr = new Struct({
    'value': 'pointer'
  }); // the real reference is here


  var resolve_ptr = function () {
    return new iunknown_ptr(_ptr.value, idl);
  };

  this.$ComPtr_Invoke = function (methodDfn, args) {
    return resolve_ptr().InvokeMethod(methodDfn[0], methodDfn[1], args, "$ComPtr_Invoke");
  };

  this.$ComPtr_GetMethodAddress = function (methodDfn) {
    return resolve_ptr().GetMethodAddress(methodDfn[0]);
  };

  this.Release = function () {
    return resolve_ptr().Release();
  };

  this.GetAddressOf = function () {
    return _ptr.Get();
  };

  this.Get = function () {
    return _ptr.value;
  };

  this.As = function (otherIdl) {
    var ret = new com_ptr(otherIdl);
    ThrowIfFailed(resolve_ptr().QueryInterface(otherIdl.IID, ret.GetAddressOf()));
    return ret;
  };

  this.Attach = function (addr) {
    _ptr.value = addr;
    return this;
  };

  this.toString = function () {
    var iinspectable_extra = idl == IInspectable && _ptr.value != 0x0 ? " " + resolve_ptr().GetRuntimeClassName() + " IInspectable" + resolve_ptr().GetIids() + " " + resolve_ptr().GetTrustLevel() : "";
    return "[com_ptr " + _ptr.Get() + iinspectable_extra + "]";
  };

  var self = this;

  var CreateMethod = function (methodName) {
    var removed_methods = ["QueryInterface", "AddRef", "Release", "GetIids", "GetRuntimeClassName", "GetTrustLevel", "IID", "IInspectable"];

    for (var i = 0; i < removed_methods.length; ++i) {
      if (removed_methods[i] == method) {
        return;
      }
    }

    var MethodProc = function () {
      return resolve_ptr().InvokeMethod(idl[methodName][0], idl[methodName][1], Array.prototype.slice.call(arguments, 0), methodName, idl[methodName][2]);
    };

    MethodProc.GetAddressOf = function () {
      return resolve_ptr().GetMethodAddress(idl[methodName][0]);
    };

    self[methodName] = MethodProc;
  }; // Add IDL methods onto this object.


  for (var method in idl) {
    CreateMethod(method);
  }
}

function RuntimeComObject(iid) {
  var vtable_entries = [];
  var iids = [IUnknown.IID, IAgileObject.IID, iid];
  var refCount = 1;

  this.AddEntry = function (callback, retType, paramTypes) {
    vtable_entries.push(new NativeCallback(callback, retType, paramTypes, Win32.Abi));
  };

  this.AddIid = function (iid) {
    iids.push(iid);
  };

  this.GetAddress = function () {
    var vTable = Memory.alloc(Process.pointerSize * vtable_entries.length);

    for (var i = 0; i < vtable_entries.length; ++i) {
      var vTableEntry = vTable.add(Process.pointerSize * i);
      Memory.writePointer(vTableEntry, vtable_entries[i]);
    }

    var com_object_pointer = new Struct({
      'value': 'pointer'
    });
    com_object_pointer.value = vTable;
    return com_object_pointer.Get();
  }; // QueryInterface


  this.AddEntry(function (this_ptr, riid, ppv) {
    var find_guid = GUID.read(riid);

    for (var i = 0; i < iids.length; ++i) {
      if (GUID.read(iids[i]) == find_guid) {
        ++refCount;
        Memory.writePointer(ppv, this_ptr); //console.log("RuntimeComObject QueryInterface S_OK: " + find_guid);

        return S_OK;
      }
    }

    console.error("RuntimeComObject QueryInterface E_NOINTERFACE: " + find_guid);
    return E_NOINTERFACE;
  }, 'uint', ['pointer', 'pointer', 'pointer']); // AddRef

  this.AddEntry(function (this_ptr) {
    return ++refCount;
  }, 'ulong', ['pointer']); // Release

  this.AddEntry(function (this_ptr) {
    return --refCount;
  }, 'ulong', ['pointer']);
}

module.exports = {
  S_OK: S_OK,
  ApartmentType: {
    // COINIT
    STA: 0x2,
    MTA: 0x0
  },
  ClassContext: {
    // CLSCTX
    InProc: 0x1,
    Local: 0x4
  },
  IUnknown: IUnknown,
  IInspectable: IInspectable,
  Pointer: com_ptr,
  Interface: ComInterface,
  RuntimeObject: RuntimeComObject,
  Succeeded: Succeeded,
  Failed: Failed,
  ThrowIfFailed: ThrowIfFailed,
  CreateInstance: function (clsid, clsctx, idl) {
    var ret = new com_ptr(idl);
    ThrowIfFailed(Ole32.CoCreateInstance(clsid, NULL, clsctx, idl.IID, ret.GetAddressOf()));
    return ret;
  },
  Initialize: function (apartment) {
    ThrowIfFailed(Ole32.CoInitializeEx(NULL, apartment));
  }
};

},{"./guid":3,"./struct":4,"./win32":5}],3:[function(require,module,exports){
"use strict";

const Win32 = require('./win32');

var Ole32 = {
  CLSIDFromString: new NativeFunction(Module.findExportByName("ole32.dll", "CLSIDFromString"), 'uint', ['pointer', 'pointer'], Win32.Abi),
  StringFromGUID2: new NativeFunction(Module.findExportByName("ole32.dll", "StringFromGUID2"), 'int', ['pointer', 'pointer', 'int'], Win32.Abi)
};
const GUID_SIZE_BYTES = 16;
module.exports = {
  Size: GUID_SIZE_BYTES,
  alloc: function (guid_string) {
    if (guid_string.length == 32) {
      // 6fdf6ffced7794fa407ea7b86ed9e59d
      guid_string = "{" + guid_string.substr(0, 8) + "-" + raw_guid.substr(8, 4) + "-" + raw_guid.substr(12, 4) + "-" + raw_guid.substr(16, 4) + "-" + raw_guid.substr(20) + "}";
    } else if (guid_string.length == 36) {
      // 6fdf6ffc-ed77-94fa-407e-a7b86ed9e59d
      guid_string = "{" + guid_string + "}";
    } else if (guid_string.length == 38) {
      // {6fdf6ffc-ed77-94fa-407e-a7b86ed9e59d}
      guid_string = guid_string;
    } else {
      throw Error("Guid is in an unexpected or invalid format.");
    }

    var guidStructPtr = Memory.alloc(GUID_SIZE_BYTES);

    if (0 != Ole32.CLSIDFromString(Memory.allocUtf16String(guid_string), guidStructPtr)) {
      throw Error("Can't convert string '" + guid_string + "' to GUID.");
    }

    return guidStructPtr;
  },
  read: function (guid_ptr) {
    var cbGuidStr = 128; // bytes

    var guidBuffer = Memory.alloc(cbGuidStr);

    if (Ole32.StringFromGUID2(guid_ptr, guidBuffer, cbGuidStr / 2
    /* wchar_t */
    ) > 0) {
      return Memory.readUtf16String(guidBuffer);
    } else {
      throw Error('Failed to parse guid');
    }
  }
};

},{"./win32":5}],4:[function(require,module,exports){
var TypeMap = {
  'pointer': [Process.pointerSize, Memory.readPointer, Memory.writePointer],
  'char': [1, Memory.readS8, Memory.writeS8],
  'uchar': [1, Memory.readU8, Memory.writeU8],
  'int8': [1, Memory.readS8, Memory.writeS8],
  'uint8': [1, Memory.readU8, Memory.writeU8],
  'int16': [2, Memory.readS16, Memory.writeS16],
  'uint16': [2, Memory.readU16, Memory.writeU16],
  'int': [4, Memory.readS32, Memory.writeS32],
  'uint': [4, Memory.readU32, Memory.writeU32],
  'int32': [4, Memory.readS32, Memory.writeS32],
  'uint32': [4, Memory.readU32, Memory.writeU32],
  'long': [4, Memory.readS32, Memory.writeS32],
  'ulong': [4, Memory.readU32, Memory.writeU32],
  'float': [4, Memory.readFloat, Memory.writeFloat],
  'double': [8, Memory.readDouble, Memory.writeDouble],
  'int64': [8, Memory.readS64, Memory.writeS64],
  'uint64': [8, Memory.readU64, Memory.writeU64]
}; // Given a set of definitions, build an object with getters/setters around base_ptr.

var Struct = function (structInfo) {
  function LookupType(stringType) {
    for (var type in TypeMap) {
      if (stringType == type) {
        return TypeMap[type];
      }
    }

    throw Error("Didn't find " + JSON.stringify(stringType) + " in TypeMap");
  }

  var setter_result_cache = {};

  function CreateGetterSetter(self, name, type, offset) {
    Object.defineProperty(self, name, {
      get: function () {
        return LookupType(type)[1](base_ptr.add(offset));
      },
      set: function (newValue) {
        setter_result_cache[name] = LookupType(type)[2](base_ptr.add(offset), newValue);
      }
    });
  }

  ;

  function SizeOfType(stringType) {
    return LookupType(stringType)[0];
  }

  var base_ptr_size = 0;

  for (var member in structInfo) {
    var member_size = 0;

    if (member == "union") {
      var union = structInfo[member];

      for (var union_member in union) {
        var union_member_type = union[union_member];
        var union_member_size = SizeOfType(union_member_type);

        if (member_size < union_member_size) {
          member_size = union_member_size;
        }

        CreateGetterSetter(this, union_member, union_member_type, base_ptr_size);
      }
    } else {
      var member_size = SizeOfType(structInfo[member]);
      CreateGetterSetter(this, member, structInfo[member], base_ptr_size);
    }

    base_ptr_size += member_size;
  }

  var base_ptr = Memory.alloc(base_ptr_size);

  this.Get = function () {
    return base_ptr;
  };

  Object.defineProperty(this, "Size", {
    get: function () {
      return base_ptr_size;
    }
  });
};

module.exports = Struct;
module.exports.TypeMap = TypeMap;

},{}],5:[function(require,module,exports){
const Struct = require('./struct');

const GUID = require('./guid');

module.exports = {
  // Microsoft APIs use stdcall on x86.
  Abi: Process.arch == 'x64' ? 'win64' : 'stdcall'
};

},{"./guid":3,"./struct":4}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
